/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  collections: {
    media: Media;
    pages: Page;
    projects: Project;
    technologies: Technology;
    users: User;
    forms: Form;
    'form-submissions': FormSubmission;
  };
  globals: {
    header: Header;
    profile: Profile;
  };
}
export interface Media {
  id: string;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string;
  filename?: string;
  mimeType?: string;
  filesize?: number;
  width?: number;
  height?: number;
}
export interface Page {
  id: string;
  title: string;
  layout?: (
    | {
        contentFields?: {
          size?: 'oneThird' | 'half' | 'twoThirds' | 'full';
          richText?: {
            [k: string]: unknown;
          }[];
          enableLink?: boolean;
          link?: {
            type?: 'reference' | 'custom';
            newTab?: boolean;
            reference:
              | {
                  value: string | Page;
                  relationTo: 'pages';
                }
              | {
                  value: string | Project;
                  relationTo: 'projects';
                };
            url: string;
            label: string;
            appearance?: 'primary' | 'secondary';
          };
          id?: string;
        }[];
        id?: string;
        blockName?: string;
        blockType: 'content';
      }
    | {
        richText?: {
          [k: string]: unknown;
        }[];
        form: string | Form;
        id?: string;
        blockName?: string;
        blockType: 'form';
      }
    | {
        mediaFields?: {
          size?: 'oneThird' | 'half' | 'twoThirds' | 'full';
          media: string | Media;
          id?: string;
        }[];
        id?: string;
        blockName?: string;
        blockType: 'mediaBlock';
      }
    | {
        mediaContentFields?: {
          alignment?: 'contentMedia' | 'mediaContent';
          mediaSize?: 'oneThird' | 'half' | 'twoThirds';
          richText?: {
            [k: string]: unknown;
          }[];
          enableLink?: boolean;
          link?: {
            type?: 'reference' | 'custom';
            newTab?: boolean;
            reference:
              | {
                  value: string | Page;
                  relationTo: 'pages';
                }
              | {
                  value: string | Project;
                  relationTo: 'projects';
                };
            url: string;
            label: string;
            appearance?: 'primary' | 'secondary';
          };
          media: string | Media;
          id?: string;
        }[];
        id?: string;
        blockName?: string;
        blockType: 'mediaContent';
      }
    | {
        id?: string;
        blockName?: string;
        blockType: 'profile-cta';
      }
    | {
        project: string[] | Project[];
        id?: string;
        blockName?: string;
        blockType: 'projectGrid';
      }
  )[];
  slug?: string;
  meta?: {
    title?: string;
    description?: string;
    image?: string | Media;
  };
  updatedAt: string;
  createdAt: string;
  _status?: 'draft' | 'published';
}
export interface Project {
  id: string;
  title: string;
  description: {
    [k: string]: unknown;
  }[];
  technologiesUsed: string[] | Technology[];
  featuredImage?: string | Media;
  layout?: (
    | {
        contentFields?: {
          size?: 'oneThird' | 'half' | 'twoThirds' | 'full';
          richText?: {
            [k: string]: unknown;
          }[];
          enableLink?: boolean;
          link?: {
            type?: 'reference' | 'custom';
            newTab?: boolean;
            reference:
              | {
                  value: string | Page;
                  relationTo: 'pages';
                }
              | {
                  value: string | Project;
                  relationTo: 'projects';
                };
            url: string;
            label: string;
            appearance?: 'primary' | 'secondary';
          };
          id?: string;
        }[];
        id?: string;
        blockName?: string;
        blockType: 'content';
      }
    | {
        richText?: {
          [k: string]: unknown;
        }[];
        form: string | Form;
        id?: string;
        blockName?: string;
        blockType: 'form';
      }
    | {
        mediaFields?: {
          size?: 'oneThird' | 'half' | 'twoThirds' | 'full';
          media: string | Media;
          id?: string;
        }[];
        id?: string;
        blockName?: string;
        blockType: 'mediaBlock';
      }
    | {
        mediaContentFields?: {
          alignment?: 'contentMedia' | 'mediaContent';
          mediaSize?: 'oneThird' | 'half' | 'twoThirds';
          richText?: {
            [k: string]: unknown;
          }[];
          enableLink?: boolean;
          link?: {
            type?: 'reference' | 'custom';
            newTab?: boolean;
            reference:
              | {
                  value: string | Page;
                  relationTo: 'pages';
                }
              | {
                  value: string | Project;
                  relationTo: 'projects';
                };
            url: string;
            label: string;
            appearance?: 'primary' | 'secondary';
          };
          media: string | Media;
          id?: string;
        }[];
        id?: string;
        blockName?: string;
        blockType: 'mediaContent';
      }
  )[];
  slug?: string;
  role: ('uiUxDesigner' | 'frontEndDeveloper' | 'backEndDeveloper')[];
  startDate?: string;
  endDate?: string;
  meta?: {
    title?: string;
    description?: string;
    image?: string | Media;
  };
  updatedAt: string;
  createdAt: string;
  _status?: 'draft' | 'published';
}
export interface Technology {
  id: string;
  name: string;
  updatedAt: string;
  createdAt: string;
}
export interface Form {
  id: string;
  title: string;
  fields?: (
    | {
        name: string;
        label?: string;
        width?: number;
        defaultValue?: string;
        required?: boolean;
        id?: string;
        blockName?: string;
        blockType: 'text';
      }
    | {
        name: string;
        label?: string;
        width?: number;
        defaultValue?: string;
        required?: boolean;
        id?: string;
        blockName?: string;
        blockType: 'textarea';
      }
    | {
        name: string;
        label?: string;
        width?: number;
        defaultValue?: string;
        options?: {
          label: string;
          value: string;
          id?: string;
        }[];
        required?: boolean;
        id?: string;
        blockName?: string;
        blockType: 'select';
      }
    | {
        name: string;
        label?: string;
        width?: number;
        required?: boolean;
        id?: string;
        blockName?: string;
        blockType: 'email';
      }
    | {
        name: string;
        label?: string;
        width?: number;
        required?: boolean;
        id?: string;
        blockName?: string;
        blockType: 'state';
      }
    | {
        name: string;
        label?: string;
        width?: number;
        required?: boolean;
        id?: string;
        blockName?: string;
        blockType: 'country';
      }
    | {
        name: string;
        label?: string;
        width?: number;
        defaultValue?: number;
        required?: boolean;
        id?: string;
        blockName?: string;
        blockType: 'number';
      }
    | {
        name: string;
        label?: string;
        width?: number;
        required?: boolean;
        defaultValue?: boolean;
        id?: string;
        blockName?: string;
        blockType: 'checkbox';
      }
    | {
        message?: {
          [k: string]: unknown;
        }[];
        id?: string;
        blockName?: string;
        blockType: 'message';
      }
  )[];
  submitButtonLabel?: string;
  confirmationType?: 'message' | 'redirect';
  confirmationMessage: {
    [k: string]: unknown;
  }[];
  redirect?: {
    url: string;
  };
  emails?: {
    emailTo?: string;
    cc?: string;
    bcc?: string;
    replyTo?: string;
    emailFrom?: string;
    subject: string;
    message?: {
      [k: string]: unknown;
    }[];
    id?: string;
  }[];
  updatedAt: string;
  createdAt: string;
}
export interface User {
  id: string;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string;
  resetPasswordExpiration?: string;
  salt?: string;
  hash?: string;
  loginAttempts?: number;
  lockUntil?: string;
  password?: string;
}
export interface FormSubmission {
  id: string;
  form: string | Form;
  submissionData?: {
    field: string;
    value: string;
    id?: string;
  }[];
  updatedAt: string;
  createdAt: string;
}
export interface Header {
  id: string;
  navItems?: {
    link: {
      type?: 'reference' | 'custom';
      newTab?: boolean;
      reference:
        | {
            value: string | Page;
            relationTo: 'pages';
          }
        | {
            value: string | Project;
            relationTo: 'projects';
          };
      url: string;
      label: string;
    };
    id?: string;
  }[];
  updatedAt?: string;
  createdAt?: string;
}
export interface Profile {
  id: string;
  name: string;
  location?: string;
  title?: string;
  aboutMe?: {
    [k: string]: unknown;
  }[];
  profileImage?: string | Media;
  socialLinks?: {
    github?: string;
    linkedin?: string;
    email?: string;
    twitter?: string;
  };
  updatedAt?: string;
  createdAt?: string;
}
